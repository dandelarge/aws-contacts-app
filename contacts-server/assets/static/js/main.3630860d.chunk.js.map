{"version":3,"sources":["Contacts.js","ContactForm.js","App.js","serviceWorker.js","index.js"],"names":["ContactCard","_ref","avatar","username","phone","react_default","a","createElement","className","src","ContactsList","_ref2","listItems","contacts","map","_ref3","id","Contacts_ContactCard","key","ContactForm","type","name","htmlFor","placeholder","value","contactsArray","fullname","App","Contacts","src_ContactForm","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMAEMA,EAAc,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,OAAQC,EAAVF,EAAUE,SAAUC,EAApBH,EAAoBG,MAApB,OAClBC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBACZH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASC,IAAKP,IAC7BG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYL,GAC3BE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASJ,MAiBfM,EAZM,SAAAC,GAAgB,IAC7BC,EAD6BD,EAAdE,SACMC,IAAI,SAAAC,GAAA,IAAEb,EAAFa,EAAEb,OAAQC,EAAVY,EAAUZ,SAAUC,EAApBW,EAAoBX,MAAOY,EAA3BD,EAA2BC,GAA3B,OAC7BX,EAAAC,EAAAC,cAACU,EAAD,CAAaf,OAAQA,EAAQC,SAAUA,EAAUC,MAAOA,EAAOc,IAAKF,MAGtE,OACEX,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBACXI,ICLQO,EAZK,kBAClBd,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASC,IAAI,wCAC5BJ,EAAAC,EAAAC,cAAA,SAAOa,KAAK,OAAOC,KAAK,SAASL,GAAG,gBACpCX,EAAAC,EAAAC,cAAA,SAAOe,QAAQ,eAAf,oBACAjB,EAAAC,EAAAC,cAAA,SAAOa,KAAK,OAAOC,KAAK,WAAWL,GAAG,gBAAgBO,YAAY,aAClElB,EAAAC,EAAAC,cAAA,SAAOa,KAAK,OAAOC,KAAK,WAAWL,GAAG,gBAAgBO,YAAY,cAClElB,EAAAC,EAAAC,cAAA,SAAOa,KAAK,OAAOC,KAAK,QAAQL,GAAG,aAAaO,YAAY,UAC5DlB,EAAAC,EAAAC,cAAA,SAAOa,KAAK,SAASI,MAAM,UAAUhB,UAAU,yBCL7CiB,EAAgB,CACpB,CACET,GAAI,EACJd,OAAQ,gFACRC,SAAU,aACVuB,SAAU,GACVtB,MAAO,mBAET,CACEY,GAAI,EACJd,OAAQ,mDACRC,SAAU,gBACVuB,SAAU,GACVtB,MAAO,mBAET,CACEY,GAAI,EACJd,OAAQ,mDACRC,SAAU,QACVuB,SAAU,GACVtB,MAAO,mBAET,CACEY,GAAI,EACJd,OAAQ,oGACRC,SAAU,MACVuB,SAAU,GACVtB,MAAO,oBA4BIuB,mLAtBX,OACEtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,6BAGJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,iDACAF,EAAAC,EAAAC,cAACqB,EAAD,CAAcf,SAAUY,IACxBpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAf,uBAGAH,EAAAC,EAAAC,cAACsB,EAAD,gBAhBMC,aCxBEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3630860d.chunk.js","sourcesContent":["import React from 'react';\n\nconst ContactCard = ({avatar, username, phone}) => (\n  <li className=\"contact-card\">\n    <img className=\"avatar\" src={avatar}/>\n    <div className=\"contact-info\">\n      <div className=\"username\">{username}</div>\n      <div className=\"phone\">{phone}</div>\n    </div>\n  </li>\n);\n\nconst ContactsList = ({contacts}) => {\n  const listItems = contacts.map(({avatar, username, phone, id}) => (\n    <ContactCard avatar={avatar} username={username} phone={phone} key={id}/>\n  ));\n\n  return (\n    <ul className=\"contacts-list\">\n      {listItems}\n    </ul>\n  );\n};\n\nexport default ContactsList;\n","import React from 'react';\n\nconst ContactForm = () => (\n  <form className=\"contact-form\">\n    <img className=\"avatar\" src=\"https://i.redd.it/xmulu1f6urt11.jpg\" />\n    <input type=\"file\" name=\"avatar\" id=\"avatarInput\"/>\n    <label htmlFor=\"avatarInput\">Choose an image!</label>\n    <input type=\"text\" name=\"username\" id=\"usernameInput\" placeholder=\"username\"/>\n    <input type=\"text\" name=\"fullname\" id=\"fullNameInput\" placeholder=\"full name\"/>\n    <input type=\"text\" name=\"phone\" id=\"phoneInput\" placeholder=\"phone\"/>\n    <input type=\"submit\" value=\"create!\" className=\"add-contact-button\"/>\n  </form>\n);\n\nexport default ContactForm;\n","import React, { Component } from 'react';\nimport ContactsList from './Contacts'\nimport ContactForm from './ContactForm';\n\n\nconst contactsArray = [\n  {\n    id: 0,\n    avatar: 'https://pbs.twimg.com/profile_images/1002272769352978433/9S4QWSR0_400x400.jpg',\n    username: 'SpongyBobu',\n    fullname: '',\n    phone: '+31 6 3400 7732'\n  },\n  {\n    id: 1,\n    avatar: 'https://i.ytimg.com/vi/krz7RZHnGnE/hqdefault.jpg',\n    username: 'elHijoDelPapa',\n    fullname: '',\n    phone: '+31 6 3400 7732'\n  },\n  {\n    id: 2,\n    avatar: 'https://i.ytimg.com/vi/mRf3-JkwqfU/hqdefault.jpg',\n    username: 'Puppy',\n    fullname: '',\n    phone: '+31 6 3400 7732'\n  },\n  {\n    id: 3,\n    avatar: 'https://yt3.ggpht.com/a-/AN66SAy6GVR9FKfi5C_qKDZkFSCyDIoxrhCeeWf-bQ=s900-mo-c-c0xffffffff-rj-k-no',\n    username: 'bob',\n    fullname: '',\n    phone: '+31 6 3400 7732'\n  },\n];\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"approot container-fluid\">\n        <div className=\"row header\">\n          <div className=\"col\">\n            <h1>Contacts App!</h1>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col\">\n            <h3>Find a sweet list of contacts below</h3>\n            <ContactsList contacts={contactsArray}/>\n            <div className=\"add-contact-button\">\n              + Add a new contact\n            </div>\n            <ContactForm />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}